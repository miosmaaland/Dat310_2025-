{"ast":null,"code":"export default {\n  name: \"AdminPage\",\n  data() {\n    return {\n      questions: [],\n      newQuestion: {\n        question: \"\",\n        correct_answer: \"\",\n        wrong1: \"\",\n        wrong2: \"\",\n        wrong3: \"\",\n        category_id: 1,\n        level: 1\n      },\n      editId: null,\n      editQuestion: {},\n      errorMessage: \"\",\n      successMessage: \"\"\n    };\n  },\n  computed: {\n    isAdmin() {\n      // You may want to check this from localStorage or a global store\n      return localStorage.getItem(\"is_admin\") === \"1\";\n    }\n  },\n  methods: {\n    fetchQuestions() {\n      fetch(\"/api/questions\", {\n        credentials: \"include\"\n      }).then(res => res.json()).then(data => {\n        this.questions = data;\n      });\n    },\n    addQuestion() {\n      const errors = [];\n      const q = this.newQuestion;\n      if (!q.question.trim()) errors.push(\"Question is required.\");\n      if (!q.correct_answer.trim()) errors.push(\"Correct answer is required.\");\n      if (!q.wrong1.trim() || !q.wrong2.trim() || !q.wrong3.trim()) errors.push(\"All wrong answers are required.\");\n      if (![1, 2, 3].includes(Number(q.level))) errors.push(\"Level must be 1, 2, or 3.\");\n      if (!Number.isInteger(Number(q.category_id)) || Number(q.category_id) < 1) errors.push(\"Category ID must be a positive integer.\");\n      const wrongs = [q.wrong1.trim(), q.wrong2.trim(), q.wrong3.trim()];\n      if (wrongs.includes(q.correct_answer.trim())) errors.push(\"Wrong answers cannot match the correct answer.\");\n      if (new Set(wrongs).size !== wrongs.length) errors.push(\"Wrong answers must be unique.\");\n      if (errors.length) {\n        this.errorMessage = errors.join(\" \");\n        this.successMessage = \"\";\n        return;\n      }\n      const payload = {\n        question: q.question,\n        correct_answer: q.correct_answer,\n        wrong_answers: wrongs,\n        category_id: q.category_id,\n        level: q.level\n      };\n      fetch(\"/api/questions\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        credentials: \"include\",\n        body: JSON.stringify(payload)\n      }).then(res => res.json()).then(data => {\n        if (data.success) {\n          this.successMessage = \"Question added!\";\n          this.errorMessage = \"\";\n          this.fetchQuestions();\n          this.newQuestion = {\n            question: \"\",\n            correct_answer: \"\",\n            wrong1: \"\",\n            wrong2: \"\",\n            wrong3: \"\",\n            category_id: 1,\n            level: 1\n          };\n        } else {\n          this.errorMessage = data.error || \"Failed to add question.\";\n          this.successMessage = \"\";\n        }\n      });\n    },\n    deleteQuestion(id) {\n      fetch(`/api/questions/${id}`, {\n        method: \"DELETE\",\n        credentials: \"include\"\n      }).then(res => res.json()).then(data => {\n        if (data.success) {\n          this.successMessage = \"Question deleted!\";\n          this.errorMessage = \"\";\n          this.fetchQuestions();\n        } else {\n          this.errorMessage = data.error || \"Failed to delete question.\";\n          this.successMessage = \"\";\n        }\n      });\n    },\n    startEdit(q) {\n      this.editId = q.id;\n      this.editQuestion = {\n        question: q.question,\n        correct_answer: q.correct_answer,\n        category_id: q.category_id,\n        level: q.level\n      };\n    },\n    saveEdit(id) {\n      const original = this.questions.find(q => q.id === id);\n      const payload = {\n        question: this.editQuestion.question,\n        correct_answer: this.editQuestion.correct_answer,\n        wrong_answers: original.wrong_answers,\n        category_id: this.editQuestion.category_id,\n        level: this.editQuestion.level\n      };\n      fetch(`/api/questions/${id}`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        credentials: \"include\",\n        body: JSON.stringify(payload)\n      }).then(res => res.json()).then(data => {\n        if (data.success) {\n          this.successMessage = \"Question updated!\";\n          this.errorMessage = \"\";\n          this.editId = null;\n          this.editQuestion = {};\n          this.fetchQuestions();\n        } else {\n          this.errorMessage = data.error || \"Failed to update question.\";\n          this.successMessage = \"\";\n        }\n      });\n    },\n    cancelEdit() {\n      this.editId = null;\n      this.editQuestion = {};\n    }\n  },\n  mounted() {\n    this.fetchQuestions();\n  }\n};","map":{"version":3,"names":["name","data","questions","newQuestion","question","correct_answer","wrong1","wrong2","wrong3","category_id","level","editId","editQuestion","errorMessage","successMessage","computed","isAdmin","localStorage","getItem","methods","fetchQuestions","fetch","credentials","then","res","json","addQuestion","errors","q","trim","push","includes","Number","isInteger","wrongs","Set","size","length","join","payload","wrong_answers","method","headers","body","JSON","stringify","success","error","deleteQuestion","id","startEdit","saveEdit","original","find","cancelEdit","mounted"],"sources":["/Users/miosmaland/Skole/Dat310/san/cs-quiz-master/frontend/src/components/Admin.vue"],"sourcesContent":["<template>\n    <div class=\"container mt-5\">\n      <h2>Admin: Manage Questions</h2>\n      <div v-if=\"!isAdmin\" class=\"alert alert-danger\">You are not authorized to view this page.</div>\n      <div v-else>\n        <form @submit.prevent=\"addQuestion\" class=\"mb-4\">\n          <h4>Add New Question</h4>\n          <input v-model=\"newQuestion.question\" placeholder=\"Question\" class=\"form-control mb-2\" required />\n          <input v-model=\"newQuestion.correct_answer\" placeholder=\"Correct Answer\" class=\"form-control mb-2\" required />\n          <input v-model=\"newQuestion.wrong1\" placeholder=\"Wrong Answer 1\" class=\"form-control mb-2\" required />\n          <input v-model=\"newQuestion.wrong2\" placeholder=\"Wrong Answer 2\" class=\"form-control mb-2\" required />\n          <input v-model=\"newQuestion.wrong3\" placeholder=\"Wrong Answer 3\" class=\"form-control mb-2\" required />\n          <input v-model.number=\"newQuestion.category_id\" placeholder=\"Category ID\" class=\"form-control mb-2\" required />\n          <input v-model.number=\"newQuestion.level\" placeholder=\"Level (1-3)\" class=\"form-control mb-2\" required />\n          <button class=\"btn btn-success\" type=\"submit\">Add Question</button>\n        </form>\n  \n        <h4>All Questions</h4>\n        <table class=\"table table-bordered\">\n          <thead>\n            <tr>\n              <th>ID</th>\n              <th>Question</th>\n              <th>Correct</th>\n              <th>Category</th>\n              <th>Level</th>\n              <th>Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr v-for=\"q in questions\" :key=\"q.id\">\n              <td>{{ q.id }}</td>\n              <td>\n                <input v-if=\"editId === q.id\" v-model=\"editQuestion.question\" class=\"form-control\" />\n                <span v-else>{{ q.question }}</span>\n              </td>\n              <td>\n                <input v-if=\"editId === q.id\" v-model=\"editQuestion.correct_answer\" class=\"form-control\" />\n                <span v-else>{{ q.correct_answer }}</span>\n              </td>\n              <td>\n                <input v-if=\"editId === q.id\" v-model.number=\"editQuestion.category_id\" class=\"form-control\" />\n                <span v-else>{{ q.category_id }}</span>\n              </td>\n              <td>\n                <input v-if=\"editId === q.id\" v-model.number=\"editQuestion.level\" class=\"form-control\" />\n                <span v-else>{{ q.level }}</span>\n              </td>\n              <td>\n                <button v-if=\"editId !== q.id\" class=\"btn btn-primary btn-sm\" @click=\"startEdit(q)\">Edit</button>\n                <button v-if=\"editId === q.id\" class=\"btn btn-success btn-sm\" @click=\"saveEdit(q.id)\">Save</button>\n                <button v-if=\"editId === q.id\" class=\"btn btn-secondary btn-sm\" @click=\"cancelEdit\">Cancel</button>\n                <button class=\"btn btn-danger btn-sm\" @click=\"deleteQuestion(q.id)\">Delete</button>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n        <div v-if=\"errorMessage\" class=\"alert alert-danger\">{{ errorMessage }}</div>\n        <div v-if=\"successMessage\" class=\"alert alert-success\">{{ successMessage }}</div>\n      </div>\n    </div>\n  </template>\n  \n  <script>\n  export default {\n    name: \"AdminPage\",\n    data() {\n      return {\n        questions: [],\n        newQuestion: {\n          question: \"\",\n          correct_answer: \"\",\n          wrong1: \"\",\n          wrong2: \"\",\n          wrong3: \"\",\n          category_id: 1,\n          level: 1,\n        },\n        editId: null,\n        editQuestion: {},\n        errorMessage: \"\",\n        successMessage: \"\",\n      };\n    },\n    computed: {\n      isAdmin() {\n        // You may want to check this from localStorage or a global store\n        return localStorage.getItem(\"is_admin\") === \"1\";\n      },\n    },\n    methods: {\n      fetchQuestions() {\n        fetch(\"/api/questions\", { credentials: \"include\" })\n          .then((res) => res.json())\n          .then((data) => {\n            this.questions = data;\n          });\n      },\n      \naddQuestion() {\n  const errors = [];\n  const q = this.newQuestion;\n  if (!q.question.trim()) errors.push(\"Question is required.\");\n  if (!q.correct_answer.trim()) errors.push(\"Correct answer is required.\");\n  if (!q.wrong1.trim() || !q.wrong2.trim() || !q.wrong3.trim()) errors.push(\"All wrong answers are required.\");\n  if (![1,2,3].includes(Number(q.level))) errors.push(\"Level must be 1, 2, or 3.\");\n  if (!Number.isInteger(Number(q.category_id)) || Number(q.category_id) < 1) errors.push(\"Category ID must be a positive integer.\");\n  const wrongs = [q.wrong1.trim(), q.wrong2.trim(), q.wrong3.trim()];\n  if (wrongs.includes(q.correct_answer.trim())) errors.push(\"Wrong answers cannot match the correct answer.\");\n  if (new Set(wrongs).size !== wrongs.length) errors.push(\"Wrong answers must be unique.\");\n  if (errors.length) {\n    this.errorMessage = errors.join(\" \");\n    this.successMessage = \"\";\n    return;\n  }\n  const payload = {\n    question: q.question,\n    correct_answer: q.correct_answer,\n    wrong_answers: wrongs,\n    category_id: q.category_id,\n    level: q.level,\n  };\n  fetch(\"/api/questions\", {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    credentials: \"include\",\n    body: JSON.stringify(payload),\n  })\n    .then((res) => res.json())\n    .then((data) => {\n      if (data.success) {\n        this.successMessage = \"Question added!\";\n        this.errorMessage = \"\";\n        this.fetchQuestions();\n        this.newQuestion = {\n          question: \"\",\n          correct_answer: \"\",\n          wrong1: \"\",\n          wrong2: \"\",\n          wrong3: \"\",\n          category_id: 1,\n          level: 1,\n        };\n      } else {\n        this.errorMessage = data.error || \"Failed to add question.\";\n        this.successMessage = \"\";\n      }\n    });\n},\n      deleteQuestion(id) {\n        fetch(`/api/questions/${id}`, {\n          method: \"DELETE\",\n          credentials: \"include\",\n        })\n          .then((res) => res.json())\n          .then((data) => {\n            if (data.success) {\n              this.successMessage = \"Question deleted!\";\n              this.errorMessage = \"\";\n              this.fetchQuestions();\n            } else {\n              this.errorMessage = data.error || \"Failed to delete question.\";\n              this.successMessage = \"\";\n            }\n          });\n      },\n      startEdit(q) {\n        this.editId = q.id;\n        this.editQuestion = {\n          question: q.question,\n          correct_answer: q.correct_answer,\n          category_id: q.category_id,\n          level: q.level,\n        };\n      },\n      saveEdit(id) {\n        const original = this.questions.find(q => q.id === id);\n        const payload = {\n          question: this.editQuestion.question,\n          correct_answer: this.editQuestion.correct_answer,\n          wrong_answers: original.wrong_answers,\n          category_id: this.editQuestion.category_id,\n          level: this.editQuestion.level,\n        };\n        fetch(`/api/questions/${id}`, {\n          method: \"PUT\",\n          headers: { \"Content-Type\": \"application/json\" },\n          credentials: \"include\",\n          body: JSON.stringify(payload),\n        })\n          .then((res) => res.json())\n          .then((data) => {\n            if (data.success) {\n              this.successMessage = \"Question updated!\";\n              this.errorMessage = \"\";\n              this.editId = null;\n              this.editQuestion = {};\n              this.fetchQuestions();\n            } else {\n              this.errorMessage = data.error || \"Failed to update question.\";\n              this.successMessage = \"\";\n            }\n          });\n      },\n      cancelEdit() {\n        this.editId = null;\n        this.editQuestion = {};\n      },\n    },\n    mounted() {\n      this.fetchQuestions();\n    },\n  };\n  </script>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}