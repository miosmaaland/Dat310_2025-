{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, withModifiers as _withModifiers, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"container mt-5\"\n};\nconst _hoisted_2 = {\n  class: \"mb-3\"\n};\nconst _hoisted_3 = {\n  class: \"mb-3\"\n};\nconst _hoisted_4 = {\n  class: \"mb-3\"\n};\nconst _hoisted_5 = {\n  key: 0,\n  class: \"mt-3 text-success\"\n};\nconst _hoisted_6 = {\n  key: 1,\n  class: \"mt-3 text-danger\"\n};\nconst _hoisted_7 = {\n  class: \"mt-3\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_router_link = _resolveComponent(\"router-link\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[10] || (_cache[10] = _createElementVNode(\"h2\", {\n    class: \"mb-4\"\n  }, \"Sign Up\", -1 /* HOISTED */)), _createElementVNode(\"form\", {\n    onSubmit: _cache[3] || (_cache[3] = _withModifiers((...args) => $options.handleSignup && $options.handleSignup(...args), [\"prevent\"]))\n  }, [_createElementVNode(\"div\", _hoisted_2, [_cache[4] || (_cache[4] = _createElementVNode(\"label\", {\n    for: \"username\",\n    class: \"form-label\"\n  }, \"Username\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.username = $event),\n    type: \"text\",\n    class: \"form-control\",\n    id: \"username\",\n    required: \"\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.username]])]), _createElementVNode(\"div\", _hoisted_3, [_cache[5] || (_cache[5] = _createElementVNode(\"label\", {\n    for: \"email\",\n    class: \"form-label\"\n  }, \"Email\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.email = $event),\n    type: \"email\",\n    class: \"form-control\",\n    id: \"email\",\n    required: \"\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.email]])]), _createElementVNode(\"div\", _hoisted_4, [_cache[6] || (_cache[6] = _createElementVNode(\"label\", {\n    for: \"password\",\n    class: \"form-label\"\n  }, \"Password\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $data.password = $event),\n    type: \"password\",\n    class: \"form-control\",\n    id: \"password\",\n    required: \"\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.password]])]), _cache[7] || (_cache[7] = _createElementVNode(\"button\", {\n    type: \"submit\",\n    class: \"btn btn-success\"\n  }, \"Sign Up\", -1 /* HOISTED */))], 32 /* NEED_HYDRATION */), $data.successMessage ? (_openBlock(), _createElementBlock(\"p\", _hoisted_5, _toDisplayString($data.successMessage), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true), $data.errorMessage ? (_openBlock(), _createElementBlock(\"p\", _hoisted_6, _toDisplayString($data.errorMessage), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"p\", _hoisted_7, [_cache[9] || (_cache[9] = _createTextVNode(\" Already have an account? \")), _createVNode(_component_router_link, {\n    to: \"/login\"\n  }, {\n    default: _withCtx(() => _cache[8] || (_cache[8] = [_createTextVNode(\"Login here\")])),\n    _: 1 /* STABLE */,\n    __: [8]\n  })])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createElementVNode","onSubmit","_cache","_withModifiers","args","$options","handleSignup","_hoisted_2","for","$data","username","$event","type","id","required","_hoisted_3","email","_hoisted_4","password","successMessage","_hoisted_5","_toDisplayString","errorMessage","_hoisted_6","_hoisted_7","_createVNode","_component_router_link","to"],"sources":["/Users/miosmaland/Skole/Dat310/san/cs-quiz-master/frontend/src/components/Signup.vue"],"sourcesContent":["<template>\n  <div class=\"container mt-5\">\n    <h2 class=\"mb-4\">Sign Up</h2>\n    <form @submit.prevent=\"handleSignup\">\n      <div class=\"mb-3\">\n        <label for=\"username\" class=\"form-label\">Username</label>\n        <input v-model=\"username\" type=\"text\" class=\"form-control\" id=\"username\" required />\n      </div>\n      <div class=\"mb-3\">\n        <label for=\"email\" class=\"form-label\">Email</label>\n        <input v-model=\"email\" type=\"email\" class=\"form-control\" id=\"email\" required />\n      </div>\n      <div class=\"mb-3\">\n        <label for=\"password\" class=\"form-label\">Password</label>\n        <input v-model=\"password\" type=\"password\" class=\"form-control\" id=\"password\" required />\n      </div>\n      <button type=\"submit\" class=\"btn btn-success\">Sign Up</button>\n    </form>\n\n    <p class=\"mt-3 text-success\" v-if=\"successMessage\">{{ successMessage }}</p>\n    <p class=\"mt-3 text-danger\" v-if=\"errorMessage\">{{ errorMessage }}</p>\n\n    <p class=\"mt-3\">\n      Already have an account?\n      <router-link to=\"/login\">Login here</router-link>\n    </p>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"UserSignup\",\n  data() {\n    return {\n      username: \"\",\n      email: \"\",\n      password: \"\",\n      successMessage: \"\",\n      errorMessage: \"\"\n    };\n  },\n  methods: {\n    async handleSignup() {\n  // Username validation\n  const username = this.username.trim();\n  if (username.length < 3) {\n    this.errorMessage = \"Username must be at least 3 characters.\";\n    return;\n  }\n  if (!/^[a-zA-Z0-9_]+$/.test(username)) {\n    this.errorMessage = \"Username can only contain letters, numbers, and underscores.\";\n    return;\n  }\n  // Email validation\n  const email = this.email.trim();\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  if (!emailRegex.test(email)) {\n    this.errorMessage = \"Please enter a valid email address.\";\n    return;\n  }\n  // Password validation (already present)\n  const password = this.password;\n  if (password.length < 8) {\n    this.errorMessage = \"Password must be at least 8 characters.\";\n    return;\n  }\n  if (!/\\d/.test(password)) {\n    this.errorMessage = \"Password must contain at least one number.\";\n    return;\n  }\n  this.errorMessage = \"\"; // Clear previous errors\n\n  try {\n    const response = await fetch(\"/api/signup\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        username: username,\n        email: email,\n        password: password,\n      }),\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      this.errorMessage = data.error || \"Signup failed\";\n      return;\n    }\n    // Automatically log in after successful signup\n    const loginRes = await fetch(\"/api/login\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        username: username,\n        password: password,\n      }),\n      credentials: \"include\",\n    });\n    const loginData = await loginRes.json();\n    if (loginData.success) {\n      localStorage.setItem('user_id', loginData.user_id);\n      localStorage.setItem('username', loginData.username);\n      this.$router.push(\"/\");\n    } else {\n      this.errorMessage = loginData.error || \"Login after signup failed\";\n    }\n  } catch (error) {\n    console.error(error);\n    this.errorMessage = \"Server error. Try again later.\";\n  }\n},async handleSignup() {\n  // Username validation\n  const username = this.username.trim();\n  if (username.length < 3) {\n    this.errorMessage = \"Username must be at least 3 characters.\";\n    return;\n  }\n  if (!/^[a-zA-Z0-9_]+$/.test(username)) {\n    this.errorMessage = \"Username can only contain letters, numbers, and underscores.\";\n    return;\n  }\n  // Email validation\n  const email = this.email.trim();\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  if (!emailRegex.test(email)) {\n    this.errorMessage = \"Please enter a valid email address.\";\n    return;\n  }\n  // Password validation (already present)\n  const password = this.password;\n  if (password.length < 8) {\n    this.errorMessage = \"Password must be at least 8 characters.\";\n    return;\n  }\n  if (!/\\d/.test(password)) {\n    this.errorMessage = \"Password must contain at least one number.\";\n    return;\n  }\n  this.errorMessage = \"\"; // Clear previous errors\n\n  try {\n    const response = await fetch(\"/api/signup\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        username: username,\n        email: email,\n        password: password,\n      }),\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      this.errorMessage = data.error || \"Signup failed\";\n      return;\n    }\n    // Automatically log in after successful signup\n    const loginRes = await fetch(\"/api/login\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        username: username,\n        password: password,\n      }),\n      credentials: \"include\",\n    });\n    const loginData = await loginRes.json();\n    if (loginData.success) {\n      localStorage.setItem('user_id', loginData.user_id);\n      localStorage.setItem('username', loginData.username);\n      this.$router.push(\"/\");\n    } else {\n      this.errorMessage = loginData.error || \"Login after signup failed\";\n    }\n  } catch (error) {\n    console.error(error);\n    this.errorMessage = \"Server error. Try again later.\";\n  }\n    },\n  },\n};\n</script>"],"mappings":";;EACOA,KAAK,EAAC;AAAgB;;EAGlBA,KAAK,EAAC;AAAM;;EAIZA,KAAK,EAAC;AAAM;;EAIZA,KAAK,EAAC;AAAM;;;EAOhBA,KAAK,EAAC;;;;EACNA,KAAK,EAAC;;;EAENA,KAAK,EAAC;AAAM;;;uBArBjBC,mBAAA,CAyBM,OAzBNC,UAyBM,G,4BAxBJC,mBAAA,CAA6B;IAAzBH,KAAK,EAAC;EAAM,GAAC,SAAO,sBACxBG,mBAAA,CAcO;IAdAC,QAAM,EAAAC,MAAA,QAAAA,MAAA,MAAAC,cAAA,KAAAC,IAAA,KAAUC,QAAA,CAAAC,YAAA,IAAAD,QAAA,CAAAC,YAAA,IAAAF,IAAA,CAAY;MACjCJ,mBAAA,CAGM,OAHNO,UAGM,G,0BAFJP,mBAAA,CAAyD;IAAlDQ,GAAG,EAAC,UAAU;IAACX,KAAK,EAAC;KAAa,UAAQ,sB,gBACjDG,mBAAA,CAAoF;+DAApES,KAAA,CAAAC,QAAQ,GAAAC,MAAA;IAAEC,IAAI,EAAC,MAAM;IAACf,KAAK,EAAC,cAAc;IAACgB,EAAE,EAAC,UAAU;IAACC,QAAQ,EAAR;iDAAzDL,KAAA,CAAAC,QAAQ,E,KAE1BV,mBAAA,CAGM,OAHNe,UAGM,G,0BAFJf,mBAAA,CAAmD;IAA5CQ,GAAG,EAAC,OAAO;IAACX,KAAK,EAAC;KAAa,OAAK,sB,gBAC3CG,mBAAA,CAA+E;+DAA/DS,KAAA,CAAAO,KAAK,GAAAL,MAAA;IAAEC,IAAI,EAAC,OAAO;IAACf,KAAK,EAAC,cAAc;IAACgB,EAAE,EAAC,OAAO;IAACC,QAAQ,EAAR;iDAApDL,KAAA,CAAAO,KAAK,E,KAEvBhB,mBAAA,CAGM,OAHNiB,UAGM,G,0BAFJjB,mBAAA,CAAyD;IAAlDQ,GAAG,EAAC,UAAU;IAACX,KAAK,EAAC;KAAa,UAAQ,sB,gBACjDG,mBAAA,CAAwF;+DAAxES,KAAA,CAAAS,QAAQ,GAAAP,MAAA;IAAEC,IAAI,EAAC,UAAU;IAACf,KAAK,EAAC,cAAc;IAACgB,EAAE,EAAC,UAAU;IAACC,QAAQ,EAAR;iDAA7DL,KAAA,CAAAS,QAAQ,E,+BAE1BlB,mBAAA,CAA8D;IAAtDY,IAAI,EAAC,QAAQ;IAACf,KAAK,EAAC;KAAkB,SAAO,qB,4BAGpBY,KAAA,CAAAU,cAAc,I,cAAjDrB,mBAAA,CAA2E,KAA3EsB,UAA2E,EAAAC,gBAAA,CAArBZ,KAAA,CAAAU,cAAc,oB,mCAClCV,KAAA,CAAAa,YAAY,I,cAA9CxB,mBAAA,CAAsE,KAAtEyB,UAAsE,EAAAF,gBAAA,CAAnBZ,KAAA,CAAAa,YAAY,oB,mCAE/DtB,mBAAA,CAGI,KAHJwB,UAGI,G,2CAHY,4BAEd,IAAAC,YAAA,CAAiDC,sBAAA;IAApCC,EAAE,EAAC;EAAQ;sBAAC,MAAUzB,MAAA,QAAAA,MAAA,O,iBAAV,YAAU,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}