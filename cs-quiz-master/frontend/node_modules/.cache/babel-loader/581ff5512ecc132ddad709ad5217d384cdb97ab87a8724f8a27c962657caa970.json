{"ast":null,"code":"export default {\n  name: \"QuizPlay\",\n  // Updated to a multi-word name\n  data() {\n    return {\n      question: null,\n      message: ''\n    };\n  },\n  methods: {\n    fetchQuestion() {\n      fetch('/api/question').then(res => res.json()).then(data => {\n        if (!data.error) {\n          this.question = data;\n        } else {\n          this.message = data.error;\n        }\n      });\n    },\n    submitAnswer(answer) {\n      fetch('/api/answer', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          question_id: this.question.id,\n          answer\n        })\n      }).then(res => res.json()).then(data => {\n        if (data.correct) {\n          this.message = 'Correct!';\n        } else {\n          this.message = `Wrong! The correct answer was ${data.correct_answer}`;\n        }\n        this.fetchQuestion();\n      });\n    }\n  },\n  mounted() {\n    this.fetchQuestion();\n  }\n};","map":{"version":3,"names":["name","data","question","message","methods","fetchQuestion","fetch","then","res","json","error","submitAnswer","answer","method","headers","body","JSON","stringify","question_id","id","correct","correct_answer","mounted"],"sources":["/Users/miosmaland/Skole/Dat310/san/cs-quiz-master/frontend/src/components/Play.vue"],"sourcesContent":["<template>\n  <div>\n    <h1>Play Quiz</h1>\n    <div v-if=\"question\">\n      <p>{{ question.question }}</p>\n      <ul>\n        <li v-for=\"(option, key) in question.options\" :key=\"key\">\n          <button @click=\"submitAnswer(key)\">{{ key }}: {{ option }}</button>\n        </li>\n      </ul>\n    </div>\n    <p v-if=\"message\">{{ message }}</p>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"QuizPlay\", // Updated to a multi-word name\n  data() {\n    return {\n      question: null,\n      message: '',\n    };\n  },\n  methods: {\n    fetchQuestion() {\n      fetch('/api/question')\n        .then((res) => res.json())\n        .then((data) => {\n          if (!data.error) {\n            this.question = data;\n          } else {\n            this.message = data.error;\n          }\n        });\n    },\n    submitAnswer(answer) {\n      fetch('/api/answer', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ question_id: this.question.id, answer }),\n      })\n        .then((res) => res.json())\n        .then((data) => {\n          if (data.correct) {\n            this.message = 'Correct!';\n          } else {\n            this.message = `Wrong! The correct answer was ${data.correct_answer}`;\n          }\n          this.fetchQuestion();\n        });\n    },\n  },\n  mounted() {\n    this.fetchQuestion();\n  },\n};\n</script>"],"mappings":"AAgBA,eAAe;EACbA,IAAI,EAAE,UAAU;EAAE;EAClBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,QAAQ,EAAE,IAAI;MACdC,OAAO,EAAE;IACX,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACPC,aAAaA,CAAA,EAAG;MACdC,KAAK,CAAC,eAAe,EAClBC,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,EACxBF,IAAI,CAAEN,IAAI,IAAK;QACd,IAAI,CAACA,IAAI,CAACS,KAAK,EAAE;UACf,IAAI,CAACR,QAAO,GAAID,IAAI;QACtB,OAAO;UACL,IAAI,CAACE,OAAM,GAAIF,IAAI,CAACS,KAAK;QAC3B;MACF,CAAC,CAAC;IACN,CAAC;IACDC,YAAYA,CAACC,MAAM,EAAE;MACnBN,KAAK,CAAC,aAAa,EAAE;QACnBO,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEC,WAAW,EAAE,IAAI,CAAChB,QAAQ,CAACiB,EAAE;UAAEP;QAAO,CAAC;MAChE,CAAC,EACEL,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,EACxBF,IAAI,CAAEN,IAAI,IAAK;QACd,IAAIA,IAAI,CAACmB,OAAO,EAAE;UAChB,IAAI,CAACjB,OAAM,GAAI,UAAU;QAC3B,OAAO;UACL,IAAI,CAACA,OAAM,GAAI,iCAAiCF,IAAI,CAACoB,cAAc,EAAE;QACvE;QACA,IAAI,CAAChB,aAAa,CAAC,CAAC;MACtB,CAAC,CAAC;IACN;EACF,CAAC;EACDiB,OAAOA,CAAA,EAAG;IACR,IAAI,CAACjB,aAAa,CAAC,CAAC;EACtB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}