{"ast":null,"code":"export default {\n  name: \"AdminPage\",\n  data() {\n    return {\n      questions: [],\n      newQuestion: {\n        question: \"\",\n        correct_answer: \"\",\n        wrong1: \"\",\n        wrong2: \"\",\n        wrong3: \"\",\n        category_id: 1,\n        level: 1\n      },\n      editId: null,\n      editQuestion: {},\n      errorMessage: \"\",\n      successMessage: \"\"\n    };\n  },\n  computed: {\n    isAdmin() {\n      return localStorage.getItem(\"is_admin\") === \"1\";\n    }\n  },\n  methods: {\n    logout() {\n      fetch('/api/logout', {\n        method: 'POST'\n      }).then(() => {\n        localStorage.clear();\n        this.$router.push('/');\n      });\n    },\n    fetchQuestions() {\n      fetch(\"/api/questions\", {\n        credentials: \"include\"\n      }).then(res => res.json()).then(data => {\n        this.questions = data;\n      });\n    },\n    addQuestion() {\n      const errors = [];\n      const q = this.newQuestion;\n      if (!q.question.trim()) errors.push(\"Question is required.\");\n      if (!q.correct_answer.trim()) errors.push(\"Correct answer is required.\");\n      if (!q.wrong1.trim() || !q.wrong2.trim() || !q.wrong3.trim()) errors.push(\"All wrong answers are required.\");\n      if (![1, 2, 3, 4, 5].includes(Number(q.level))) errors.push(\"Level must be 1, 2, 3, 4 or 3.\");\n      if (!Number.isInteger(Number(q.category_id)) || Number(q.category_id) < 1) errors.push(\"Category ID must be a positive integer.\");\n      const wrongs = [q.wrong1.trim(), q.wrong2.trim(), q.wrong3.trim()];\n      if (wrongs.includes(q.correct_answer.trim())) errors.push(\"Wrong answers cannot match the correct answer.\");\n      if (new Set(wrongs).size !== wrongs.length) errors.push(\"Wrong answers must be unique.\");\n      if (errors.length) {\n        this.errorMessage = errors.join(\" \");\n        this.successMessage = \"\";\n        return;\n      }\n      const payload = {\n        question: q.question,\n        correct_answer: q.correct_answer,\n        wrong_answers: wrongs,\n        category_id: q.category_id,\n        level: q.level\n      };\n      fetch(\"/api/questions\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        credentials: \"include\",\n        body: JSON.stringify(payload)\n      }).then(res => res.json()).then(data => {\n        if (data.success) {\n          this.successMessage = \"Question added!\";\n          this.errorMessage = \"\";\n          this.fetchQuestions();\n          this.newQuestion = {\n            question: \"\",\n            correct_answer: \"\",\n            wrong1: \"\",\n            wrong2: \"\",\n            wrong3: \"\",\n            category_id: 1,\n            level: 1\n          };\n        } else {\n          this.errorMessage = data.error || \"Failed to add question.\";\n          this.successMessage = \"\";\n        }\n      });\n    },\n    deleteQuestion(id) {\n      if (!confirm(\"Are you sure you want to delete this question?\")) return;\n      fetch(`/api/questions/${id}`, {\n        method: \"DELETE\",\n        credentials: \"include\"\n      }).then(res => res.json()).then(data => {\n        if (data.success) {\n          this.successMessage = \"Question deleted!\";\n          this.errorMessage = \"\";\n          this.fetchQuestions();\n        } else {\n          this.errorMessage = data.error || \"Failed to delete question.\";\n          this.successMessage = \"\";\n        }\n      });\n    },\n    startEdit(q) {\n      this.editId = q.id;\n      this.editQuestion = {\n        question: q.question,\n        correct_answer: q.correct_answer,\n        category_id: q.category_id,\n        level: q.level\n      };\n    },\n    saveEdit(id) {\n      const original = this.questions.find(q => q.id === id);\n      const payload = {\n        question: this.editQuestion.question,\n        correct_answer: this.editQuestion.correct_answer,\n        wrong_answers: original.wrong_answers,\n        category_id: this.editQuestion.category_id,\n        level: this.editQuestion.level\n      };\n      fetch(`/api/questions/${id}`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        credentials: \"include\",\n        body: JSON.stringify(payload)\n      }).then(res => res.json()).then(data => {\n        if (data.success) {\n          this.successMessage = \"Question updated!\";\n          this.errorMessage = \"\";\n          this.editId = null;\n          this.editQuestion = {};\n          this.fetchQuestions();\n        } else {\n          this.errorMessage = data.error || \"Failed to update question.\";\n          this.successMessage = \"\";\n        }\n      });\n    },\n    cancelEdit() {\n      this.editId = null;\n      this.editQuestion = {};\n    }\n  },\n  mounted() {\n    this.fetchQuestions();\n  }\n};","map":{"version":3,"names":["name","data","questions","newQuestion","question","correct_answer","wrong1","wrong2","wrong3","category_id","level","editId","editQuestion","errorMessage","successMessage","computed","isAdmin","localStorage","getItem","methods","logout","fetch","method","then","clear","$router","push","fetchQuestions","credentials","res","json","addQuestion","errors","q","trim","includes","Number","isInteger","wrongs","Set","size","length","join","payload","wrong_answers","headers","body","JSON","stringify","success","error","deleteQuestion","id","confirm","startEdit","saveEdit","original","find","cancelEdit","mounted"],"sources":["/Users/miosmaland/Skole/Dat310/san/cs-quiz-master/frontend/src/components/Admin.vue"],"sourcesContent":["<template>\n  <div>\n    <nav class=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n      <div class=\"container\">\n        <router-link class=\"navbar-brand\" to=\"/\">CS Quiz Master</router-link>\n        <button\n          class=\"navbar-toggler\"\n          type=\"button\"\n          data-bs-toggle=\"collapse\"\n          data-bs-target=\"#navbarNav\"\n          aria-controls=\"navbarNav\"\n          aria-expanded=\"false\"\n          aria-label=\"Toggle navigation\"\n        >\n          <span class=\"navbar-toggler-icon\"></span>\n        </button>\n        <div class=\"collapse navbar-collapse\" id=\"navbarNav\">\n          <ul class=\"navbar-nav ms-auto\">\n            <li class=\"nav-item\"><router-link class=\"nav-link\" to=\"/\">Home</router-link></li>\n            <li class=\"nav-item\"><router-link class=\"nav-link\" to=\"/profile\">Profile</router-link></li>\n            <li class=\"nav-item\"><router-link class=\"nav-link\" to=\"/leaderboard\">Leaderboard</router-link></li>\n            <li class=\"nav-item\"><router-link class=\"nav-link\" to=\"/hangman\">Hangman</router-link></li>\n            <li class=\"nav-item\">\n              <a class=\"nav-link\" href=\"#\" @click.prevent=\"logout\">Logout</a>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </nav>\n\n    <section class=\"hero-section d-flex flex-column justify-content-center align-items-center text-center py-5 mb-4\">\n      <div class=\"hero-icon mb-3\">\n        <span style=\"font-size: 3rem;\">üõ†Ô∏è</span>\n      </div>\n      <h1 class=\"display-5 fw-bold text-white\">Admin Panel</h1>\n      <p class=\"lead text-white-50 mb-0\">Manage quiz questions and categories</p>\n    </section>\n\n    <div class=\"container mt-4\">\n      <div v-if=\"!isAdmin\" class=\"alert alert-danger\">You are not authorized to view this page.</div>\n      <div v-else>\n        <div class=\"card mb-4 shadow\">\n          <div class=\"card-body\">\n            <h4 class=\"card-title mb-3\">Add New Question</h4>\n            <form @submit.prevent=\"addQuestion\">\n              <div class=\"row g-2\">\n                <div class=\"col-md-6\">\n                  <input v-model=\"newQuestion.question\" placeholder=\"Question\" class=\"form-control mb-2\" required />\n                </div>\n                <div class=\"col-md-6\">\n                  <input v-model=\"newQuestion.correct_answer\" placeholder=\"Correct Answer\" class=\"form-control mb-2\" required />\n                </div>\n                <div class=\"col-12 col-md-4\">\n                  <input v-model=\"newQuestion.wrong1\" placeholder=\"Wrong Answer 1\" class=\"form-control mb-2\" required />\n                </div>\n                <div class=\"col-12 col-md-4\">\n                  <input v-model=\"newQuestion.wrong2\" placeholder=\"Wrong Answer 2\" class=\"form-control mb-2\" required />\n                </div>\n                <div class=\"col-12 col-md-4\">\n                  <input v-model=\"newQuestion.wrong3\" placeholder=\"Wrong Answer 3\" class=\"form-control mb-2\" required />\n                </div>\n                <div class=\"col-6 col-md-3\">\n                  <input v-model.number=\"newQuestion.category_id\" placeholder=\"Category ID\" class=\"form-control mb-2\" required />\n                </div>\n                <div class=\"col-6 col-md-3\">\n                  <input v-model.number=\"newQuestion.level\" placeholder=\"Level (1-3)\" class=\"form-control mb-2\" required />\n                </div>\n                <div class=\"col-12 col-md-6 d-flex align-items-end\">\n                  <button class=\"btn btn-success w-100\" type=\"submit\">Add Question</button>\n                </div>\n              </div>\n            </form>\n            <div v-if=\"errorMessage\" class=\"alert alert-danger mt-2\">{{ errorMessage }}</div>\n            <div v-if=\"successMessage\" class=\"alert alert-success mt-2\">{{ successMessage }}</div>\n          </div>\n        </div>\n\n        <div class=\"card shadow\">\n          <div class=\"card-body\">\n            <h4 class=\"card-title mb-3\">All Questions</h4>\n            <div class=\"table-responsive\">\n              <table class=\"table table-bordered align-middle\">\n                <thead class=\"table-light\">\n                  <tr>\n                    <th>ID</th>\n                    <th>Question</th>\n                    <th>Correct</th>\n                    <th>Category</th>\n                    <th>Level</th>\n                    <th>Actions</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr v-for=\"q in questions\" :key=\"q.id\">\n                    <td>{{ q.id }}</td>\n                    <td>\n                      <input v-if=\"editId === q.id\" v-model=\"editQuestion.question\" class=\"form-control\" />\n                      <span v-else>{{ q.question }}</span>\n                    </td>\n                    <td>\n                      <input v-if=\"editId === q.id\" v-model=\"editQuestion.correct_answer\" class=\"form-control\" />\n                      <span v-else>{{ q.correct_answer }}</span>\n                    </td>\n                    <td>\n                      <input v-if=\"editId === q.id\" v-model.number=\"editQuestion.category_id\" class=\"form-control\" />\n                      <span v-else>{{ q.category_id }}</span>\n                    </td>\n                    <td>\n                      <input v-if=\"editId === q.id\" v-model.number=\"editQuestion.level\" class=\"form-control\" />\n                      <span v-else>{{ q.level }}</span>\n                    </td>\n                    <td>\n                      <button v-if=\"editId !== q.id\" class=\"btn btn-primary btn-sm\" @click=\"startEdit(q)\">Edit</button>\n                      <button v-if=\"editId === q.id\" class=\"btn btn-success btn-sm\" @click=\"saveEdit(q.id)\">Save</button>\n                      <button v-if=\"editId === q.id\" class=\"btn btn-secondary btn-sm\" @click=\"cancelEdit\">Cancel</button>\n                      <button class=\"btn btn-danger btn-sm\" @click=\"deleteQuestion(q.id)\">Delete</button>\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"AdminPage\",\n  data() {\n    return {\n      questions: [],\n      newQuestion: {\n        question: \"\",\n        correct_answer: \"\",\n        wrong1: \"\",\n        wrong2: \"\",\n        wrong3: \"\",\n        category_id: 1,\n        level: 1,\n      },\n      editId: null,\n      editQuestion: {},\n      errorMessage: \"\",\n      successMessage: \"\",\n    };\n  },\n  computed: {\n    isAdmin() {\n      return localStorage.getItem(\"is_admin\") === \"1\";\n    },\n  },\n  methods: {\n    logout() {\n      fetch('/api/logout', { method: 'POST' })\n        .then(() => {\n          localStorage.clear();\n          this.$router.push('/');\n        });\n    },\n    fetchQuestions() {\n      fetch(\"/api/questions\", { credentials: \"include\" })\n        .then((res) => res.json())\n        .then((data) => {\n          this.questions = data;\n        });\n    },\n    addQuestion() {\n      const errors = [];\n      const q = this.newQuestion;\n      if (!q.question.trim()) errors.push(\"Question is required.\");\n      if (!q.correct_answer.trim()) errors.push(\"Correct answer is required.\");\n      if (!q.wrong1.trim() || !q.wrong2.trim() || !q.wrong3.trim()) errors.push(\"All wrong answers are required.\");\n      if (![1,2,3,4,5].includes(Number(q.level))) errors.push(\"Level must be 1, 2, 3, 4 or 3.\");\n      if (!Number.isInteger(Number(q.category_id)) || Number(q.category_id) < 1) errors.push(\"Category ID must be a positive integer.\");\n      const wrongs = [q.wrong1.trim(), q.wrong2.trim(), q.wrong3.trim()];\n      if (wrongs.includes(q.correct_answer.trim())) errors.push(\"Wrong answers cannot match the correct answer.\");\n      if (new Set(wrongs).size !== wrongs.length) errors.push(\"Wrong answers must be unique.\");\n      if (errors.length) {\n        this.errorMessage = errors.join(\" \");\n        this.successMessage = \"\";\n        return;\n      }\n      const payload = {\n        question: q.question,\n        correct_answer: q.correct_answer,\n        wrong_answers: wrongs,\n        category_id: q.category_id,\n        level: q.level,\n      };\n      fetch(\"/api/questions\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        credentials: \"include\",\n        body: JSON.stringify(payload),\n      })\n        .then((res) => res.json())\n        .then((data) => {\n          if (data.success) {\n            this.successMessage = \"Question added!\";\n            this.errorMessage = \"\";\n            this.fetchQuestions();\n            this.newQuestion = {\n              question: \"\",\n              correct_answer: \"\",\n              wrong1: \"\",\n              wrong2: \"\",\n              wrong3: \"\",\n              category_id: 1,\n              level: 1,\n            };\n          } else {\n            this.errorMessage = data.error || \"Failed to add question.\";\n            this.successMessage = \"\";\n          }\n        });\n    },\n    deleteQuestion(id) {\n  if (!confirm(\"Are you sure you want to delete this question?\")) return;\n  fetch(`/api/questions/${id}`, {\n    method: \"DELETE\",\n    credentials: \"include\",\n  })\n    .then((res) => res.json())\n    .then((data) => {\n      if (data.success) {\n        this.successMessage = \"Question deleted!\";\n        this.errorMessage = \"\";\n        this.fetchQuestions();\n      } else {\n        this.errorMessage = data.error || \"Failed to delete question.\";\n        this.successMessage = \"\";\n      }\n    });\n},\n    startEdit(q) {\n      this.editId = q.id;\n      this.editQuestion = {\n        question: q.question,\n        correct_answer: q.correct_answer,\n        category_id: q.category_id,\n        level: q.level,\n      };\n    },\n    saveEdit(id) {\n      const original = this.questions.find(q => q.id === id);\n      const payload = {\n        question: this.editQuestion.question,\n        correct_answer: this.editQuestion.correct_answer,\n        wrong_answers: original.wrong_answers,\n        category_id: this.editQuestion.category_id,\n        level: this.editQuestion.level,\n      };\n      fetch(`/api/questions/${id}`, {\n        method: \"PUT\",\n        headers: { \"Content-Type\": \"application/json\" },\n        credentials: \"include\",\n        body: JSON.stringify(payload),\n      })\n        .then((res) => res.json())\n        .then((data) => {\n          if (data.success) {\n            this.successMessage = \"Question updated!\";\n            this.errorMessage = \"\";\n            this.editId = null;\n            this.editQuestion = {};\n            this.fetchQuestions();\n          } else {\n            this.errorMessage = data.error || \"Failed to update question.\";\n            this.successMessage = \"\";\n          }\n        });\n    },\n    cancelEdit() {\n      this.editId = null;\n      this.editQuestion = {};\n    },\n  },\n  mounted() {\n    this.fetchQuestions();\n  },\n};\n</script>\n\n<style scoped>\n.hero-section {\n  background: linear-gradient(120deg, #fd7e14 0%, #007bff 100%);\n  min-height: 220px;\n  border-radius: 0 0 2rem 2rem;\n  box-shadow: 0 4px 24px rgba(0,0,0,0.08);\n}\n.hero-icon {\n  filter: drop-shadow(0 2px 8px rgba(0,0,0,0.15));\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}