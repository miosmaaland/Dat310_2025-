{"ast":null,"code":"export default {\n  name: \"UserSignup\",\n  data() {\n    return {\n      username: \"\",\n      email: \"\",\n      password: \"\",\n      successMessage: \"\",\n      errorMessage: \"\"\n    };\n  },\n  methods: {\n    async handleSignup() {\n      // Username validation\n      const username = this.username.trim();\n      if (username.length < 3) {\n        this.errorMessage = \"Username must be at least 3 characters.\";\n        return;\n      }\n      if (!/^[a-zA-Z0-9_]+$/.test(username)) {\n        this.errorMessage = \"Username can only contain letters, numbers, and underscores.\";\n        return;\n      }\n      // Email validation\n      const email = this.email.trim();\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n      if (!emailRegex.test(email)) {\n        this.errorMessage = \"Please enter a valid email address.\";\n        return;\n      }\n      // Password validation\n      const password = this.password;\n      if (password.length < 8) {\n        this.errorMessage = \"Password must be at least 8 characters.\";\n        return;\n      }\n      if (!/\\d/.test(password)) {\n        this.errorMessage = \"Password must contain at least one number.\";\n        return;\n      }\n      this.errorMessage = \"\"; // Clear previous errors\n\n      try {\n        const response = await fetch(\"/api/signup\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            username: username,\n            email: email,\n            password: password\n          })\n        });\n        const data = await response.json();\n        if (!response.ok) {\n          this.errorMessage = data.error || \"Signup failed\";\n          return;\n        }\n        // Automatically log in after successful signup\n        const loginRes = await fetch(\"/api/login\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            username: username,\n            password: password\n          }),\n          credentials: \"include\"\n        });\n        const loginData = await loginRes.json();\n        if (loginData.success) {\n          localStorage.setItem('user_id', loginData.user_id);\n          localStorage.setItem('username', loginData.username);\n          this.$router.push(\"/\");\n        } else {\n          this.errorMessage = loginData.error || \"Login after signup failed\";\n        }\n      } catch (error) {\n        console.error(error);\n        this.errorMessage = \"Server error. Try again later.\";\n      }\n    }\n  }\n};","map":{"version":3,"names":["name","data","username","email","password","successMessage","errorMessage","methods","handleSignup","trim","length","test","emailRegex","response","fetch","method","headers","body","JSON","stringify","json","ok","error","loginRes","credentials","loginData","success","localStorage","setItem","user_id","$router","push","console"],"sources":["/Users/miosmaland/Skole/Dat310/san/cs-quiz-master/frontend/src/components/Signup.vue"],"sourcesContent":["<template>\n  <div>\n    <!-- Navbar -->\n    <nav class=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n      <div class=\"container\">\n        <router-link class=\"navbar-brand\" to=\"/\">CS Quiz Master</router-link>\n        <button\n          class=\"navbar-toggler\"\n          type=\"button\"\n          data-bs-toggle=\"collapse\"\n          data-bs-target=\"#navbarNav\"\n          aria-controls=\"navbarNav\"\n          aria-expanded=\"false\"\n          aria-label=\"Toggle navigation\"\n        >\n          <span class=\"navbar-toggler-icon\"></span>\n        </button>\n        <div class=\"collapse navbar-collapse\" id=\"navbarNav\">\n          <ul class=\"navbar-nav ms-auto\">\n            <li class=\"nav-item\">\n              <router-link class=\"nav-link\" to=\"/signup\">Sign Up</router-link>\n            </li>\n\n            <li class=\"nav-item\">\n              <router-link class=\"nav-link\" to=\"/login\">Login</router-link>\n            </li>\n            <li class=\"nav-item\">\n              <router-link class=\"nav-link\" to=\"/signup\">Sign Up</router-link>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </nav>\n\n    <div class=\"container mt-5\">\n      <h2 class=\"mb-4\">Sign Up</h2>\n      <form @submit.prevent=\"handleSignup\">\n        <div class=\"mb-3\">\n          <label for=\"username\" class=\"form-label\">Username</label>\n          <input v-model=\"username\" type=\"text\" class=\"form-control\" id=\"username\" required />\n        </div>\n        <div class=\"mb-3\">\n          <label for=\"email\" class=\"form-label\">Email</label>\n          <input v-model=\"email\" type=\"email\" class=\"form-control\" id=\"email\" required />\n        </div>\n        <div class=\"mb-3\">\n          <label for=\"password\" class=\"form-label\">Password</label>\n          <input v-model=\"password\" type=\"password\" class=\"form-control\" id=\"password\" required />\n        </div>\n        <button type=\"submit\" class=\"btn btn-success\">Sign Up</button>\n      </form>\n\n      <p class=\"mt-3 text-success\" v-if=\"successMessage\">{{ successMessage }}</p>\n      <p class=\"mt-3 text-danger\" v-if=\"errorMessage\">{{ errorMessage }}</p>\n\n      <p class=\"mt-3\">\n        Already have an account?\n        <router-link to=\"/login\">Login here</router-link>\n      </p>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"UserSignup\",\n  data() {\n    return {\n      username: \"\",\n      email: \"\",\n      password: \"\",\n      successMessage: \"\",\n      errorMessage: \"\"\n    };\n  },\n  methods: {\n    async handleSignup() {\n      // Username validation\n      const username = this.username.trim();\n      if (username.length < 3) {\n        this.errorMessage = \"Username must be at least 3 characters.\";\n        return;\n      }\n      if (!/^[a-zA-Z0-9_]+$/.test(username)) {\n        this.errorMessage = \"Username can only contain letters, numbers, and underscores.\";\n        return;\n      }\n      // Email validation\n      const email = this.email.trim();\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n      if (!emailRegex.test(email)) {\n        this.errorMessage = \"Please enter a valid email address.\";\n        return;\n      }\n      // Password validation\n      const password = this.password;\n      if (password.length < 8) {\n        this.errorMessage = \"Password must be at least 8 characters.\";\n        return;\n      }\n      if (!/\\d/.test(password)) {\n        this.errorMessage = \"Password must contain at least one number.\";\n        return;\n      }\n      this.errorMessage = \"\"; // Clear previous errors\n\n      try {\n        const response = await fetch(\"/api/signup\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({\n            username: username,\n            email: email,\n            password: password,\n          }),\n        });\n        const data = await response.json();\n        if (!response.ok) {\n          this.errorMessage = data.error || \"Signup failed\";\n          return;\n        }\n        // Automatically log in after successful signup\n        const loginRes = await fetch(\"/api/login\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({\n            username: username,\n            password: password,\n          }),\n          credentials: \"include\",\n        });\n        const loginData = await loginRes.json();\n        if (loginData.success) {\n          localStorage.setItem('user_id', loginData.user_id);\n          localStorage.setItem('username', loginData.username);\n          this.$router.push(\"/\");\n        } else {\n          this.errorMessage = loginData.error || \"Login after signup failed\";\n        }\n      } catch (error) {\n        console.error(error);\n        this.errorMessage = \"Server error. Try again later.\";\n      }\n    },\n  },\n};\n</script>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}