{"ast":null,"code":"export default {\n  name: \"HangmanGame\",\n  data() {\n    return {\n      csTerms: [{\n        word: \"ALGORITHM\",\n        hint: \"A step by step procedure for solving a problem\"\n      }, {\n        word: \"RECURSION\",\n        hint: \"A function that calls itself\"\n      }, {\n        word: \"ARRAY\",\n        hint: \"A collection of elements stored at contiguous memory locations\"\n      }, {\n        word: \"STACK\",\n        hint: \"A data structure that follows LIFO principle\"\n      }, {\n        word: \"QUEUE\",\n        hint: \"A data structure that follows FIFO principle\"\n      }, {\n        word: \"BINARY\",\n        hint: \"Base-2 number system using only 0 and 1\"\n      }, {\n        word: \"COMPILER\",\n        hint: \"Translates source code into machine code\"\n      }, {\n        word: \"DATABASE\",\n        hint: \"Organized collection of structured information\"\n      }, {\n        word: \"ENCRYPTION\",\n        hint: \"Process of converting information into secret code\"\n      }, {\n        word: \"FIREWALL\",\n        hint: \"Network security system that monitors and controls traffic\"\n      }, {\n        word: \"JAVASCRIPT\",\n        hint: \"Popular programming language for web development\"\n      }, {\n        word: \"PYTHON\",\n        hint: \"High-level programming language known for simplicity\"\n      }, {\n        word: \"VARIABLE\",\n        hint: \"Storage location with an associated name\"\n      }, {\n        word: \"FUNCTION\",\n        hint: \"Reusable block of code that performs a specific task\"\n      }, {\n        word: \"BOOLEAN\",\n        hint: \"Data type with only two possible values: true or false\"\n      }],\n      letters: \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".split(\"\"),\n      selectedWord: [],\n      currentHint: \"\",\n      guessedLetters: [],\n      wrongGuesses: 0,\n      maxWrongGuesses: 6,\n      guessInput: \"\",\n      message: \"\",\n      gameOver: false,\n      gameWon: false,\n      hangmanImages: [\"/hang-man-images/hangman-0.svg\", \"/hang-man-images/hangman-1.svg\", \"/hang-man-images/hangman-2.svg\", \"/hang-man-images/hangman-3.svg\", \"/hang-man-images/hangman-4.svg\", \"/hang-man-images/hangman-5.svg\", \"/hang-man-images/hangman-6.svg\"],\n      victoryGif: \"/hang-man-images/victory.gif\",\n      lostGif: \"/hang-man-images/lost.gif\"\n    };\n  },\n  created() {\n    this.resetGame();\n  },\n  methods: {\n    resetGame() {\n      const randomTerm = this.csTerms[Math.floor(Math.random() * this.csTerms.length)];\n      this.selectedWord = randomTerm.word.split(\"\");\n      this.currentHint = randomTerm.hint;\n      this.guessedLetters = [];\n      this.wrongGuesses = 0;\n      this.guessInput = \"\";\n      this.message = \"\";\n      this.gameOver = false;\n      this.gameWon = false;\n    },\n    handleGuess(letter) {\n      if (this.gameOver || this.guessedLetters.includes(letter)) return;\n      this.guessedLetters.push(letter);\n      if (!this.selectedWord.includes(letter)) {\n        this.wrongGuesses++;\n        this.message = `Wrong guess! ${this.maxWrongGuesses - this.wrongGuesses} guesses left.`;\n      } else {\n        this.message = \"Good guess!\";\n      }\n      this.checkGameStatus();\n    },\n    makeGuess() {\n      const letter = this.guessInput.toUpperCase();\n      if (letter.length !== 1 || !this.letters.includes(letter)) {\n        this.message = \"Please enter a valid single letter.\";\n        this.guessInput = \"\";\n        return;\n      }\n      if (this.guessedLetters.includes(letter)) {\n        this.message = \"You already guessed that letter!\";\n        this.guessInput = \"\";\n        return;\n      }\n      this.handleGuess(letter);\n      this.guessInput = \"\";\n    },\n    checkGameStatus() {\n      // Check win: all letters guessed\n      const uniqueLetters = [...new Set(this.selectedWord)];\n      const allGuessed = uniqueLetters.every(letter => this.guessedLetters.includes(letter));\n      if (allGuessed) {\n        this.message = \"Congratulations! You've won!\";\n        this.gameOver = true;\n        this.gameWon = true;\n        return;\n      }\n      if (this.wrongGuesses >= this.maxWrongGuesses) {\n        this.message = `Game Over! The word was \"${this.selectedWord.join(\"\")}\".`;\n        this.gameOver = true;\n        this.gameWon = false;\n      }\n    }\n  }\n};","map":{"version":3,"names":["name","data","csTerms","word","hint","letters","split","selectedWord","currentHint","guessedLetters","wrongGuesses","maxWrongGuesses","guessInput","message","gameOver","gameWon","hangmanImages","victoryGif","lostGif","created","resetGame","methods","randomTerm","Math","floor","random","length","handleGuess","letter","includes","push","checkGameStatus","makeGuess","toUpperCase","uniqueLetters","Set","allGuessed","every","join"],"sources":["/Users/miosmaland/Skole/Dat310/san/cs-quiz-master/frontend/src/components/Hangman.vue"],"sourcesContent":["<template>\n\n   <div>\n    <!-- Navbar -->\n    <nav class=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n      <div class=\"container\">\n        <router-link class=\"navbar-brand\" to=\"/\">CS Quiz Master</router-link>\n        <button\n          class=\"navbar-toggler\"\n          type=\"button\"\n          data-bs-toggle=\"collapse\"\n          data-bs-target=\"#navbarNav\"\n          aria-controls=\"navbarNav\"\n          aria-expanded=\"false\"\n          aria-label=\"Toggle navigation\"\n        >\n          <span class=\"navbar-toggler-icon\"></span>\n        </button>\n\n        <div class=\"collapse navbar-collapse\" id=\"navbarNav\">\n          <ul class=\"navbar-nav ms-auto\">\n            <li class=\"nav-item\">\n              <router-link class=\"nav-link\" to=\"/\">Home</router-link>\n            </li>\n            <li class=\"nav-item\">\n              <router-link class=\"nav-link\" to=\"/play\">Play</router-link>\n            </li>\n            <li class=\"nav-item\">\n              <router-link class=\"nav-link\" to=\"/profile\">Profile</router-link>\n            </li>\n            <li class=\"nav-item\">\n              <router-link class=\"nav-link\" to=\"/hangman\">Hangman</router-link>\n            </li>\n            <li class=\"nav-item\">\n              <router-link class=\"nav-link\" to=\"/logout\">Logout</router-link>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </nav>\n\n\n    <section class=\"hero-section d-flex flex-column justify-content-center align-items-center text-center py-5 mb-4\">\n  <div class=\"hero-icon mb-3\">\n    <span style=\"font-size: 3rem;\">ðŸŽ®</span>\n  </div>\n  <h1 class=\"display-5 fw-bold text-white\">CS Hangman</h1>\n  <p class=\"lead text-white-50 mb-0\">Guess the CS term before you run out of tries!</p>\n</section>\n\n  <div class=\"container mt-5\">\n    <h2 class=\"mb-4\">CS Hangman</h2>\n\n    <div class=\"hangman-box mb-3 text-center\">\n      <img\n        :src=\"hangmanImages[wrongGuesses]\"\n        alt=\"hangman\"\n        style=\"max-width: 200px;\"\n      />\n    </div>\n\n    <h1 class=\"text-center mb-4\">CS Hangman</h1>\n\n    <div class=\"game-box mb-4 text-center\">\n      <ul\n        class=\"word-display list-inline\"\n        style=\"font-size: 2rem; letter-spacing: 0.3rem; padding: 0; margin-bottom: 1rem;\"\n      >\n        <li\n          v-for=\"(letter, index) in selectedWord\"\n          :key=\"index\"\n          class=\"letter\"\n          :class=\"{ guessed: guessedLetters.includes(letter) }\"\n          style=\"border-bottom: 2px solid black; min-width: 1.5rem; display: inline-block; text-transform: uppercase; user-select: none; padding: 0 0.3rem; margin-right: 0.1rem;\"\n        >\n          {{ guessedLetters.includes(letter) ? letter : \"\" }}\n        </li>\n      </ul>\n\n      <h4 class=\"hint-text mb-2\">\n        Hint: <b>{{ currentHint }}</b>\n      </h4>\n\n      <h4 class=\"guesses-text mb-3\">\n        Incorrect guesses: <b>{{ wrongGuesses }} / {{ maxWrongGuesses }}</b>\n      </h4>\n\n      <!-- Keyboard -->\n      <div class=\"keyboard mb-3\" style=\"max-width: 400px; margin: 0 auto;\">\n        <button\n          v-for=\"letter in letters\"\n          :key=\"letter\"\n          :disabled=\"guessedLetters.includes(letter) || gameOver\"\n          @click=\"handleGuess(letter)\"\n          style=\"width: 2.5rem; height: 2.5rem; margin: 0.15rem; font-weight: bold; text-transform: uppercase; cursor: pointer;\"\n        >\n          {{ letter }}\n        </button>\n      </div>\n\n      <div class=\"mb-3\" style=\"max-width: 200px; margin: 0 auto;\">\n        <input\n          v-model=\"guessInput\"\n          @keyup.enter=\"makeGuess\"\n          class=\"form-control text-center\"\n          maxlength=\"1\"\n          placeholder=\"Enter a letter\"\n          :disabled=\"gameOver\"\n        />\n      </div>\n\n      <button\n        @click=\"makeGuess\"\n        class=\"btn btn-primary\"\n        style=\"display: block; margin: 0 auto;\"\n        :disabled=\"gameOver\"\n      >\n        Guess\n      </button>\n\n      <p class=\"mt-3 font-weight-bold\" style=\"min-height: 1.5rem;\">{{ message }}</p>\n    </div>\n\n    <!-- Game Modal -->\n    <div\n      v-if=\"gameOver\"\n      class=\"game-modal\"\n      style=\"position: fixed; top: 0; left: 0; width: 100vw; height: 100vh; background: rgba(0,0,0,0.8); display: flex; align-items: center; justify-content: center; z-index: 1000;\"\n    >\n      <div\n        class=\"content bg-light p-4 rounded text-center\"\n        style=\"max-width: 350px; width: 100%;\"\n      >\n        <img\n          :src=\"gameWon ? victoryGif : lostGif\"\n          :alt=\"gameWon ? 'Victory' : 'Game Over'\"\n          style=\"max-width: 150px; margin-bottom: 1rem;\"\n        />\n        <h4>{{ gameWon ? \"Congratulations! ðŸŽ‰\" : \"Game Over! ðŸ˜”\" }}</h4>\n        <p>The correct word was: <b>{{ selectedWord.join('') }}</b></p>\n        <button @click=\"resetGame\" class=\"btn btn-success mt-3\">Play Again</button>\n      </div>\n    </div>\n  </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"HangmanGame\",\n  data() {\n    return {\n      csTerms: [\n        { word: \"ALGORITHM\", hint: \"A step by step procedure for solving a problem\" },\n        { word: \"RECURSION\", hint: \"A function that calls itself\" },\n        { word: \"ARRAY\", hint: \"A collection of elements stored at contiguous memory locations\" },\n        { word: \"STACK\", hint: \"A data structure that follows LIFO principle\" },\n        { word: \"QUEUE\", hint: \"A data structure that follows FIFO principle\" },\n        { word: \"BINARY\", hint: \"Base-2 number system using only 0 and 1\" },\n        { word: \"COMPILER\", hint: \"Translates source code into machine code\" },\n        { word: \"DATABASE\", hint: \"Organized collection of structured information\" },\n        { word: \"ENCRYPTION\", hint: \"Process of converting information into secret code\" },\n        { word: \"FIREWALL\", hint: \"Network security system that monitors and controls traffic\" },\n        { word: \"JAVASCRIPT\", hint: \"Popular programming language for web development\" },\n        { word: \"PYTHON\", hint: \"High-level programming language known for simplicity\" },\n        { word: \"VARIABLE\", hint: \"Storage location with an associated name\" },\n        { word: \"FUNCTION\", hint: \"Reusable block of code that performs a specific task\" },\n        { word: \"BOOLEAN\", hint: \"Data type with only two possible values: true or false\" },\n      ],\n      letters: \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".split(\"\"),\n      selectedWord: [],\n      currentHint: \"\",\n      guessedLetters: [],\n      wrongGuesses: 0,\n      maxWrongGuesses: 6,\n      guessInput: \"\",\n      message: \"\",\n      gameOver: false,\n      gameWon: false,\n      hangmanImages: [\n        \"/hang-man-images/hangman-0.svg\",\n        \"/hang-man-images/hangman-1.svg\",\n        \"/hang-man-images/hangman-2.svg\",\n        \"/hang-man-images/hangman-3.svg\",\n        \"/hang-man-images/hangman-4.svg\",\n        \"/hang-man-images/hangman-5.svg\",\n        \"/hang-man-images/hangman-6.svg\",\n      ],\n      victoryGif: \"/hang-man-images/victory.gif\",\n      lostGif: \"/hang-man-images/lost.gif\",\n    };\n  },\n  created() {\n    this.resetGame();\n  },\n  methods: {\n    resetGame() {\n      const randomTerm = this.csTerms[Math.floor(Math.random() * this.csTerms.length)];\n      this.selectedWord = randomTerm.word.split(\"\");\n      this.currentHint = randomTerm.hint;\n      this.guessedLetters = [];\n      this.wrongGuesses = 0;\n      this.guessInput = \"\";\n      this.message = \"\";\n      this.gameOver = false;\n      this.gameWon = false;\n    },\n    handleGuess(letter) {\n      if (this.gameOver || this.guessedLetters.includes(letter)) return;\n\n      this.guessedLetters.push(letter);\n\n      if (!this.selectedWord.includes(letter)) {\n        this.wrongGuesses++;\n        this.message = `Wrong guess! ${this.maxWrongGuesses - this.wrongGuesses} guesses left.`;\n      } else {\n        this.message = \"Good guess!\";\n      }\n\n      this.checkGameStatus();\n    },\n    makeGuess() {\n      const letter = this.guessInput.toUpperCase();\n\n      if (letter.length !== 1 || !this.letters.includes(letter)) {\n        this.message = \"Please enter a valid single letter.\";\n        this.guessInput = \"\";\n        return;\n      }\n\n      if (this.guessedLetters.includes(letter)) {\n        this.message = \"You already guessed that letter!\";\n        this.guessInput = \"\";\n        return;\n      }\n\n      this.handleGuess(letter);\n      this.guessInput = \"\";\n    },\n    checkGameStatus() {\n      // Check win: all letters guessed\n      const uniqueLetters = [...new Set(this.selectedWord)];\n      const allGuessed = uniqueLetters.every((letter) =>\n        this.guessedLetters.includes(letter)\n      );\n\n      if (allGuessed) {\n        this.message = \"Congratulations! You've won!\";\n        this.gameOver = true;\n        this.gameWon = true;\n        return;\n      }\n\n      if (this.wrongGuesses >= this.maxWrongGuesses) {\n        this.message = `Game Over! The word was \"${this.selectedWord.join(\"\")}\".`;\n        this.gameOver = true;\n        this.gameWon = false;\n      }\n    },\n  },\n};\n</script>\n\n<style scoped>\n.letter.guessed {\n  font-weight: bold;\n  color: #333;\n}\nbutton:disabled {\n  cursor: not-allowed;\n  opacity: 0.6;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}