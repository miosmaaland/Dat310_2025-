{"ast":null,"code":"export default {\n  name: \"QuizPlay\",\n  data() {\n    return {\n      question: null,\n      score: 0,\n      message: '',\n      correctAnswer: null,\n      loading: false\n    };\n  },\n  methods: {\n    fetchCategories() {\n      fetch('/api/categories').then(res => res.json()).then(data => {\n        this.categories = data;\n      }).catch(() => {\n        this.message = 'Failed to load categories.';\n      });\n    },\n    fetchScore() {\n      fetch('/api/leaderboard').then(res => res.json()).then(data => {\n        const username = localStorage.getItem('username');\n        const user = data.find(u => u.username === username);\n        if (user) this.score = user.score;\n      });\n    },\n    fetchQuestion() {\n      this.loading = true;\n      const category = this.$route.query.category;\n      const level = this.$route.query.level;\n      let url = '/api/question';\n      const params = [];\n      if (category) params.push(`category=${encodeURIComponent(category)}`);\n      if (level) params.push(`level=${encodeURIComponent(level)}`);\n      if (params.length) url += '?' + params.join('&');\n      fetch(url).then(res => res.json()).then(data => {\n        if (!data.error) {\n          this.question = data;\n          this.message = '';\n          this.correctAnswer = null;\n        } else {\n          this.message = data.error;\n        }\n        this.loading = false;\n      }).catch(() => {\n        this.message = 'Failed to load question.';\n        this.loading = false;\n      });\n    },\n    submitAnswer(key) {\n      if (this.loading) return;\n      this.loading = true;\n      const answerText = this.question.options[key];\n      fetch('/api/answer', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        credentials: 'include',\n        body: JSON.stringify({\n          question_id: this.question.id,\n          answer: answerText\n        })\n      }).then(res => res.json()).then(data => {\n        this.correctAnswer = data.correct;\n        if (data.correct) {\n          this.message = 'Correct! +10 points';\n        } else {\n          this.message = data.correct_answer ? `Wrong! The correct answer was ${data.correct_answer}` : 'Wrong! (No correct answer found)';\n        }\n        this.fetchScore();\n        setTimeout(() => {\n          this.fetchQuestion();\n          this.message = '';\n          this.correctAnswer = null;\n        }, 1000);\n      }).finally(() => {\n        this.loading = false;\n      });\n    },\n    skipQuestion() {\n      if (this.loading) return;\n      this.loading = true;\n      fetch('/api/skip', {\n        method: 'POST'\n      }).then(res => res.json()).then(data => {\n        if (data.success) {\n          this.message = 'Question skipped. -5 points';\n          this.fetchScore();\n          setTimeout(() => {\n            this.fetchQuestion();\n          }, 800);\n        } else {\n          this.message = data.error || 'Could not skip the question.';\n        }\n      }).finally(() => {\n        this.loading = false;\n      });\n    }\n  },\n  mounted() {\n    this.fetchCategories();\n    this.fetchScore();\n    this.fetchQuestion();\n  }\n};","map":{"version":3,"names":["name","data","question","score","message","correctAnswer","loading","methods","fetchCategories","fetch","then","res","json","categories","catch","fetchScore","username","localStorage","getItem","user","find","u","fetchQuestion","category","$route","query","level","url","params","push","encodeURIComponent","length","join","error","submitAnswer","key","answerText","options","method","headers","credentials","body","JSON","stringify","question_id","id","answer","correct","correct_answer","setTimeout","finally","skipQuestion","success","mounted"],"sources":["/Users/miosmaland/Skole/Dat310/san/cs-quiz-master/frontend/src/components/Play.vue"],"sourcesContent":["<template>\n  <div>\n    \n    <nav class=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n      <div class=\"container\">\n        <router-link class=\"navbar-brand\" to=\"/\">CS Quiz Master</router-link>\n        <button\n          class=\"navbar-toggler\"\n          type=\"button\"\n          data-bs-toggle=\"collapse\"\n          data-bs-target=\"#navbarNav\"\n          aria-controls=\"navbarNav\"\n          aria-expanded=\"false\"\n          aria-label=\"Toggle navigation\"\n        >\n          <span class=\"navbar-toggler-icon\"></span>\n        </button>\n\n        <div class=\"collapse navbar-collapse\" id=\"navbarNav\">\n          <ul class=\"navbar-nav ms-auto\">\n            <li class=\"nav-item\">\n              <router-link class=\"nav-link\" to=\"/\">Home</router-link>\n            </li>\n            <li class=\"nav-item\">\n              <router-link class=\"nav-link\" to=\"/profile\">Profile</router-link>\n            </li>\n            <li class=\"nav-item\">\n              <router-link class=\"nav-link\" to=\"/leaderboard\">Leaderboard</router-link>\n            </li>\n            <li class=\"nav-item\">\n              <router-link class=\"nav-link\" to=\"/hangman\">Hangman</router-link>\n            </li>\n            <li class=\"nav-item\">\n              <router-link class=\"nav-link\" to=\"/logout\">Logout</router-link>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </nav>\n\n    <section class=\"hero-section d-flex flex-column justify-content-center align-items-center text-center py-5 mb-4\">\n  <div class=\"hero-icon mb-3\">\n    <span style=\"font-size: 3rem;\">ðŸ’»</span>\n  </div>\n  <h1 class=\"display-5 fw-bold text-white\">Computer Science Challenge</h1>\n  <p class=\"lead text-white-50 mb-0\">Test your knowledge and earn points!</p>\n</section>\n\n\n<form class=\"row g-3 mb-4\" @submit.prevent=\"fetchQuestion\">\n        <div class=\"col-md-5\">\n          <label for=\"category\" class=\"form-label\">Category</label>\n          <select v-model=\"category\" id=\"category\" class=\"form-select\" @change=\"fetchQuestion\">\n            <option value=\"\">Any</option>\n            <option v-for=\"cat in categories\" :key=\"cat.id\" :value=\"cat.id\">{{ cat.name }}</option>\n          </select>\n        </div>\n        <div class=\"col-md-5\">\n          <label for=\"level\" class=\"form-label\">Level</label>\n          <select v-model=\"level\" id=\"level\" class=\"form-select\" @change=\"fetchQuestion\">\n            <option value=\"\">Any</option>\n            <option value=\"1\">Level 1</option>\n            <option value=\"2\">Level 2</option>\n            <option value=\"3\">Level 3</option>\n          </select>\n        </div>\n        <div class=\"col-md-2 d-flex align-items-end\">\n          <button type=\"submit\" class=\"btn btn-primary w-100\">New Question</button>\n        </div>\n      </form>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"QuizPlay\",\n  data() {\n    return {\n      question: null,\n      score: 0,\n      message: '',\n      correctAnswer: null,\n      loading: false,\n    };\n  },\n  methods: {\n    fetchCategories() {\n      fetch('/api/categories')\n        .then(res => res.json())\n        .then(data => {\n          this.categories = data;\n        })\n        .catch(() => {\n          this.message = 'Failed to load categories.';\n        });\n    },\n\n\n\n\n\n\n    fetchScore() {\n      fetch('/api/leaderboard')\n        .then(res => res.json())\n        .then(data => {\n          const username = localStorage.getItem('username');\n          const user = data.find(u => u.username === username);\n          if (user) this.score = user.score;\n        });\n    },\n    fetchQuestion() {\n      this.loading = true;\n      const category = this.$route.query.category;\n      const level = this.$route.query.level;\n      let url = '/api/question';\n      const params = [];\n      if (category) params.push(`category=${encodeURIComponent(category)}`);\n      if (level) params.push(`level=${encodeURIComponent(level)}`);\n      if (params.length) url += '?' + params.join('&');\n      fetch(url)\n        .then((res) => res.json())\n        .then((data) => {\n          if (!data.error) {\n            this.question = data;\n            this.message = '';\n            this.correctAnswer = null;\n          } else {\n            this.message = data.error;\n          }\n          this.loading = false;\n        })\n        .catch(() => {\n          this.message = 'Failed to load question.';\n          this.loading = false;\n        });\n    },\n    submitAnswer(key) {\n      if (this.loading) return;\n      this.loading = true;\n      const answerText = this.question.options[key];\n      fetch('/api/answer', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        credentials: 'include',\n        body: JSON.stringify({ question_id: this.question.id, answer: answerText }),\n      })\n        .then((res) => res.json())\n        .then((data) => {\n          this.correctAnswer = data.correct;\n          if (data.correct) {\n            this.message = 'Correct! +10 points';\n          } else {\n            this.message = data.correct_answer\n              ? `Wrong! The correct answer was ${data.correct_answer}`\n              : 'Wrong! (No correct answer found)';\n          }\n          this.fetchScore();\n          setTimeout(() => {\n            this.fetchQuestion();\n            this.message = '';\n            this.correctAnswer = null;\n          }, 1000);\n        })\n        .finally(() => {\n          this.loading = false;\n        });\n    },\n    skipQuestion() {\n      if (this.loading) return;\n      this.loading = true;\n      fetch('/api/skip', { method: 'POST' })\n        .then((res) => res.json())\n        .then((data) => {\n          if (data.success) {\n            this.message = 'Question skipped. -5 points';\n            this.fetchScore();\n            setTimeout(() => {\n              this.fetchQuestion();\n            }, 800);\n          } else {\n            this.message = data.error || 'Could not skip the question.';\n          }\n        })\n        .finally(() => {\n          this.loading = false;\n        });\n    },\n  },\n  mounted() {\n    this.fetchCategories();\n    this.fetchScore();\n    this.fetchQuestion();\n  },\n};\n</script>\n\n<style scoped>\n.hero-section {\n  background: linear-gradient(120deg, #fd7e14 0%, #007bff 100%);\n  min-height: 220px;\n  border-radius: 0 0 2rem 2rem;\n  box-shadow: 0 4px 24px rgba(0,0,0,0.08);\n}\n.hero-icon {\n  filter: drop-shadow(0 2px 8px rgba(0,0,0,0.15));\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}