{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  key: 0\n};\nconst _hoisted_2 = [\"onClick\"];\nconst _hoisted_3 = {\n  key: 1\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_cache[0] || (_cache[0] = _createElementVNode(\"h1\", null, \"Play Quiz\", -1)), $data.question ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"p\", null, _toDisplayString($data.question.question), 1), _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.question.options, (option, key) => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: key\n    }, [_createElementVNode(\"button\", {\n      onClick: $event => $options.submitAnswer(key)\n    }, _toDisplayString(key) + \": \" + _toDisplayString(option), 9, _hoisted_2)]);\n  }), 128))])])) : _createCommentVNode(\"\", true), $data.message ? (_openBlock(), _createElementBlock(\"p\", _hoisted_3, _toDisplayString($data.message), 1)) : _createCommentVNode(\"\", true)]);\n}","map":{"version":3,"names":["_createElementBlock","_createElementVNode","$data","question","_hoisted_1","_toDisplayString","_Fragment","_renderList","options","option","key","onClick","$event","$options","submitAnswer","_hoisted_2","message","_hoisted_3"],"sources":["/Users/miosmaland/Skole/Dat310/san/cs-quiz-master/frontend/src/components/Play.vue"],"sourcesContent":["<template>\n  <div>\n    <h1>Play Quiz</h1>\n    <div v-if=\"question\">\n      <p>{{ question.question }}</p>\n      <ul>\n        <li v-for=\"(option, key) in question.options\" :key=\"key\">\n          <button @click=\"submitAnswer(key)\">{{ key }}: {{ option }}</button>\n        </li>\n      </ul>\n    </div>\n    <p v-if=\"message\">{{ message }}</p>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"QuizPlay\", // Updated to a multi-word name\n  data() {\n    return {\n      question: null,\n      message: '',\n    };\n  },\n  methods: {\n    fetchQuestion() {\n      fetch('/api/question')\n        .then((res) => res.json())\n        .then((data) => {\n          if (!data.error) {\n            this.question = data;\n          } else {\n            this.message = data.error;\n          }\n        });\n    },\n    submitAnswer(answer) {\n      fetch('/api/answer', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ question_id: this.question.id, answer }),\n      })\n        .then((res) => res.json())\n        .then((data) => {\n          if (data.correct) {\n            this.message = 'Correct!';\n          } else {\n            this.message = `Wrong! The correct answer was ${data.correct_answer}`;\n          }\n          this.fetchQuestion();\n        });\n    },\n  },\n  mounted() {\n    this.fetchQuestion();\n  },\n};\n</script>"],"mappings":";;;;;;;;;uBACEA,mBAAA,CAWM,c,0BAVJC,mBAAA,CAAkB,YAAd,WAAS,QACFC,KAAA,CAAAC,QAAQ,I,cAAnBH,mBAAA,CAOM,OAAAI,UAAA,GANJH,mBAAA,CAA8B,WAAAI,gBAAA,CAAxBH,KAAA,CAAAC,QAAQ,CAACA,QAAQ,OACvBF,mBAAA,CAIK,c,kBAHHD,mBAAA,CAEKM,SAAA,QAAAC,WAAA,CAFuBL,KAAA,CAAAC,QAAQ,CAACK,OAAO,GAAhCC,MAAM,EAAEC,GAAG;yBAAvBV,mBAAA,CAEK;MAF0CU,GAAG,EAAEA;IAAG,IACrDT,mBAAA,CAAmE;MAA1DU,OAAK,EAAAC,MAAA,IAAEC,QAAA,CAAAC,YAAY,CAACJ,GAAG;wBAAMA,GAAG,IAAG,IAAE,GAAAL,gBAAA,CAAGI,MAAM,MAAAM,UAAA,E;kDAIpDb,KAAA,CAAAc,OAAO,I,cAAhBhB,mBAAA,CAAmC,KAAAiB,UAAA,EAAAZ,gBAAA,CAAdH,KAAA,CAAAc,OAAO,S","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}